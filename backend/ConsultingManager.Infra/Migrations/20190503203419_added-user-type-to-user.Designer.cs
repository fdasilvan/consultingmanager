// <auto-generated />
using System;
using ConsultingManager.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsultingManager.Infra.Migrations
{
    [DbContext(typeof(ConsultingManagerDbContext))]
    [Migration("20190503203419_added-user-type-to-user")]
    partial class addedusertypetouser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<Guid>("PlatformId");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.PlatformPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ProcessPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EstimatedEndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.StepPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("ProcessId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConsultantId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid?>("CustomerId");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<string>("Description");

                    b.Property<long>("Duration");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("ExecutionDate");

                    b.Property<string>("Instructions");

                    b.Property<Guid>("OwnerId");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid>("StepId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StepId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskTemplatePoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DaysToDo");

                    b.Property<string>("Description");

                    b.Property<long>("Duration");

                    b.Property<string>("Instructions");

                    b.Property<long>("StartAfterDays");

                    b.Property<Guid>("StepId");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.ToTable("TaskTemplates");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskTypePoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<Guid>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserTypePoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d10dd961-e131-4618-a235-8b0116aecc91"),
                            Description = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("5f70a257-25a9-42e4-9db3-8623d6e758a5"),
                            Description = "Líder"
                        },
                        new
                        {
                            Id = new Guid("70f24307-54b9-41e3-b4fb-4c86e0202ba4"),
                            Description = "Consultor"
                        },
                        new
                        {
                            Id = new Guid("43c2e87c-35a8-47c0-a4dd-d233b836dd4a"),
                            Description = "Cliente"
                        });
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.PlatformPoco", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.StepPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.ProcessPoco", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.CustomerPoco", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "CustomerUser")
                        .WithMany()
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.StepPoco", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskTemplatePoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.StepPoco", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.UserTypePoco", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
