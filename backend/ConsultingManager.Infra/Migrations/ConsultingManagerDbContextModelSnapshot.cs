// <auto-generated />
using System;
using ConsultingManager.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ConsultingManager.Infra.Migrations
{
    [DbContext(typeof(ConsultingManagerDbContext))]
    partial class ConsultingManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<Guid>("PlatformId");

                    b.Property<string>("StoreUrl");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerProcessPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EstimatedEndDate");

                    b.Property<Guid>("ProcessId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("CustomerProcesses");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerStepPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("ProcessId");

                    b.Property<Guid>("StepId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("StepId");

                    b.ToTable("CustomerSteps");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerTaskPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConsultantId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<string>("Description");

                    b.Property<long>("Duration");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("ExecutionDate");

                    b.Property<string>("Instructions");

                    b.Property<Guid>("OwnerId");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid>("StepId");

                    b.Property<Guid>("TaskTemplateId");

                    b.Property<Guid>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StepId");

                    b.HasIndex("TaskTemplateId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("CustomerTasks");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ModelProcessPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("ModelProcesses");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ModelStepPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("ProcessId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("ModelSteps");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ModelTaskPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<long>("DueDays");

                    b.Property<long>("Duration");

                    b.Property<string>("Instructions");

                    b.Property<long>("StartAfterDays");

                    b.Property<Guid>("StepId");

                    b.Property<Guid>("TaskTypeId");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("ModelTaks");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.PlatformPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskContentPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.ToTable("TaskContent");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.TaskTypePoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e84138fe-a7c6-4724-865f-1c4cab8be234"),
                            Description = "Consultor"
                        },
                        new
                        {
                            Id = new Guid("a26f516b-6a6f-4159-8f4e-6ca3193bea95"),
                            Description = "Cliente"
                        },
                        new
                        {
                            Id = new Guid("7b64054e-fc81-44e1-a1e2-cfb4bfcf8489"),
                            Description = "Simplo7"
                        });
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserPoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<Guid>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserTypePoco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d10dd961-e131-4618-a235-8b0116aecc91"),
                            Description = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("5f70a257-25a9-42e4-9db3-8623d6e758a5"),
                            Description = "Líder"
                        },
                        new
                        {
                            Id = new Guid("70f24307-54b9-41e3-b4fb-4c86e0202ba4"),
                            Description = "Consultor"
                        },
                        new
                        {
                            Id = new Guid("43c2e87c-35a8-47c0-a4dd-d233b836dd4a"),
                            Description = "Cliente"
                        });
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.PlatformPoco", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerProcessPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelProcessPoco", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerStepPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.CustomerPoco", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelProcessPoco", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelStepPoco", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.CustomerTaskPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.CustomerPoco", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "CustomerUser")
                        .WithMany()
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.UserPoco", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelStepPoco", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelTaskPoco", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.TaskTypePoco", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ModelStepPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.ModelProcessPoco", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.ModelTaskPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.CustomerStepPoco", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConsultingManager.Infra.Database.Models.TaskTypePoco", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ConsultingManager.Infra.Database.Models.UserPoco", b =>
                {
                    b.HasOne("ConsultingManager.Infra.Database.Models.UserTypePoco", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
